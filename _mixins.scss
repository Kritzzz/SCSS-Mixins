$font-size--base: 16 !default;
$line-height--base: 1.625 !default;

$breakpoints: (
    small: 20em,
    middle: 35em,
    large: 68.75em,
) !default;


//------------------------------------
// Media queries (requires sass-map)
//------------------------------------

@mixin respond-to($breakpoint, $min-max: min-width) {

    @if map-has-key($breakpoints, $breakpoint) {
        @media (#{$min-max}: #{map-get($breakpoints, $breakpoint)}) {
            @content;
        }
    }
    @else if type-of($breakpoint) == number
        and not unitless($breakpoint)
        and ((unit($breakpoint) == px) or (unit($breakpoint) == em)) {

        @warn "While this will compile just fine, it's not good practice to declare new breakpoints inline, somwhere in your stylesheet. Use the SASS-map instead.";

        @media (#{$min-max}: #{$breakpoint}) {
            @content;
        }
    }

    @else {
        @error "Could not compile media query with #{$breakpoint}.";
    }

}


//----------------------
//  Retina media query
//----------------------

@mixin retina() {
    @media  screen and (-webkit-min-device-pixel-ratio: 2),
            screen and (min-resolution: 192dpi),
            screen and (min-resolution: 2dppx) {
                @content;
    }
}


//--------------------------------------------------
//  Font-size Mixin
//  @author Harry Roberts, http://csswizardry.com/
//--------------------------------------------------

@mixin font-size($font-size, $line-height: $line-height--base) {
    font-size: $font-size;
    font-size: ($font-size / $font-size--base) * 1rem;

    @if $line-height == auto {
        line-height: ceil($font-size / $line-height--base) * ($line-height--base / $font-size);
    }

    @else {

        @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
            line-height: $line-height;
        }

        @elseif ($line-height != none and $line-height != false) {
            @warn "'#{$line-height}' is not a valid value for 'line-height'.";
        }

    }

}


//----------------------
//  Rotating
//----------------------


@mixin rotate ($degree) {
    transform: (rotate(#{$degree}deg));
}


//----------------------
//  Columns
//----------------------

@mixin columns($column-width: 10em, $column-count: 2, $column-gap: 35px) {
    columns: $column-width $column-count;
    column-gap: $column-gap;
}


//----------------------
// Animation mixin
//----------------------

// Formal syntax: <single-animation-name> || <time> || <timing-function> || <time> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode>
// Name (example): fadeInLeft
// Duration: Animation-duration (no way!) 1s, 5s
// Iterations: 1, 3, 9999, infinite
// Fill-mode: forwards, backwards, both, none
// Direction: normal, alternate


@mixin animation($name: fadeInLeft, $duration: 850ms, $timing-function: ease-in-out, $delay:0ms, $iterations: 1, $direction: normal, $fill-mode: both ) {
    animation:          $name $duration $timing-function $delay $iterations $direction $fill-mode;
}
